// Program Structure
<program> ::= (<struct_declaration> | <impl_block> | <function_declaration>)*

// Top-level Declarations
<struct_declaration> ::= "struct" <identifier> "{" <struct_field>* "}"
<struct_field> ::= <identifier> ":" <type> ";"

<impl_block> ::= "impl" <identifier> "{" <method_declaration>* "}"
<method_declaration> ::= "func" <identifier> "(" "self" ("," <parameter_list>)? ")" "->" <type> <block>

<function_declaration> ::= "func" <identifier> "(" <parameter_list>? ")" "->" <type> <block>

// Types
<type> ::= <basic_type> | <array_type> | <dynamic_array_type> | <struct_type>
<basic_type> ::= "int" | "float" | "string" | "bool" | "void"
<array_type> ::= "[" <type> ";" <integer_literal> "]"
<dynamic_array_type> ::= "array" "<" <type> ">"
<struct_type> ::= <identifier>

// Parameters and Arguments
<parameter_list> ::= <parameter> ("," <parameter>)*
<parameter> ::= <identifier> ":" <type>
<argument_list> ::= <expression> ("," <expression>)*

// Statements
<statement> ::= <variable_declaration>
              | <expression_statement>
              | <return_statement>
              | <if_statement>
              | <while_statement>
              | <for_statement>
              | <match_statement>
              | <break_statement>
              | <continue_statement>

<block> ::= "{" <statement>* "}"

// Control Flow
<if_statement> ::= "if" "(" <expression> ")" <block> ("else" <block>)?
<while_statement> ::= "while" "(" <expression> ")" <block>
<for_statement> ::= "for" "(" <variable_declaration>? ";" <expression>? ";" <expression>? ")" <block>
<match_statement> ::= "match" <expression> "{" <match_arm>* "}"
<match_arm> ::= <pattern> "=>" <block>
<pattern> ::= <literal> | "_"
<break_statement> ::= "break" ";"
<continue_statement> ::= "continue" ";"

// Declarations and Expressions
<variable_declaration> ::= "var" <identifier> ":" <type> "=" <expression> ";"
<return_statement> ::= "return" <expression>? ";"
<expression_statement> ::= <expression> ";"

// Expressions
<expression> ::= <literal>
               | <identifier>
               | <binary_operation>
               | <function_call>
               | <method_call>
               | <array_access>
               | <struct_instantiation>
               | <field_access>
               | <array_literal>

<method_call> ::= <expression> "." <identifier> "(" <argument_list>? ")"
<array_access> ::= <identifier> "[" <expression> "]"
<struct_instantiation> ::= <identifier> "{" <field_init>* "}"
<field_init> ::= <identifier> ":" <expression> ","
<field_access> ::= <expression> "." <identifier>
<function_call> ::= (<identifier> | <built_in_function>) "(" <argument_list>? ")"

// Built-in Functions
<built_in_function> ::= 
    // I/O Operations
      "print" | "println"
    | "prompt"
    | "readInt" | "readFloat"
    | "readTextFile"
    | "writeTextFile"
    | "readBinaryFile"
    | "writeBinaryFile"
    // Type Conversion
    | "toString" | "toInt" | "toFloat"
    // Array Operations
    | "len"
    | "push"
    | "pop"
    | "insert"
    | "remove"
    | "clear"
    | "slice"
    | "concat"
    | "find"
    | "filter"
    | "map"
    | "reduce"

// Operators
<binary_operation> ::= <expression> <operator> <expression>
<operator> ::= "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "%" | "&&" | "||"

// Basic Elements
<identifier> ::= [a-zA-Z_][a-zA-Z0-9_]*
<literal> ::= <integer_literal>
            | <float_literal>
            | <string_literal>
            | <boolean_literal>
            | <array_literal>
<integer_literal> ::= [0-9]+
<float_literal> ::= [0-9]+ "." [0-9]+
<string_literal> ::= '"' [^"]* '"'
<boolean_literal> ::= "true" | "false"
<array_literal> ::= "[" (<expression> ("," <expression>)*)? "]"
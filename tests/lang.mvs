// ตัวอย่างโค้ด MVS ที่แสดงฟีเจอร์ทั้งหมดของ subset
// คอมเม้นต์นี้เป็นตัวอย่างการใช้งานคอมเม้นต์ใน MVS ด้วย "//"

// รายละเอียดของ subset ที่รองรับ:
// 1. ชนิดข้อมูล (Types):
//    - Number: รองรับทั้งจำนวนเต็ม (เช่น 1, 10) และทศนิยม (เช่น 1.12, 2.5)
//    - String: ข้อความที่อยู่ในเครื่องหมายคำพูด (เช่น "Hello")
//    - Bool: ค่าความจริง (true หรือ false)
//    - Array: อาร์เรย์ของข้อมูล (เช่น [1, 2, 3])
//    - Struct: โครงสร้างข้อมูลที่มีฟิลด์ (เช่น struct Person { name: String })
//    - Option: ชนิดข้อมูลที่อาจมีค่า (Some) หรือไม่มีค่า (None)
//    - Null: ค่าว่าง (null)
//    - Pointer(*): ตัวชี้ไปยังที่อยู่ของตัวแปร (ใช้ * หน้า Type และ & เพื่อส่งที่อยู่)
//    - Void: ชนิดที่ระบุว่าไม่มีการคืนค่า (ใช้ในฟังก์ชันที่ไม่ return)

// 2. ตัวดำเนินการ (Operators):
//    - + : บวกตัวเลข (เช่น 1 + 2 = 3, 1.5 + 2.5 = 4.0)
//    - - : ลบตัวเลข (เช่น 5 - 3 = 2)
//    - * : คูณตัวเลข (เช่น 2 * 3 = 6)
//    - / : หารตัวเลข (เช่น 6 / 2 = 3, 5 / 2 = 2.5)
//    - ** : ยกกำลัง (เช่น 2 ** 3 = 8)
//    - == : เปรียบเทียบเท่ากัน (เช่น 5 == 5 -> true)
//    - != : เปรียบเทียบไม่เท่ากัน (เช่น 5 != 3 -> true)
//    - > : มากกว่า (เช่น 5 > 3 -> true)
//    - < : น้อยกว่า (เช่น 3 < 5 -> true)
//    - <= : น้อยกว่าหรือเท่ากับ (เช่น 3 <= 3 -> true)
//    - >= : มากกว่าหรือเท่ากับ (เช่น 5 >= 3 -> true)

// 3. โครงสร้างควบคุม (Control Flows):
//    - if(condition) {} : ถ้าเงื่อนไขเป็นจริง จะรันโค้ดใน {}
//    - else {} : ถ้าเงื่อนไขใน if ไม่เป็นจริง จะรันโค้ดใน else
//    - else if(condition) {} : ถ้าเงื่อนไขใน if ไม่จริง แต่เงื่อนไขนี้จริง จะรันโค้ดใน {}
//    - for(var; condition; step) {} : วนลูปโดยกำหนดตัวแปรเริ่มต้น, เงื่อนไข, และขั้นตอน
//    - while(condition) {} : วนลูปตราบใดที่เงื่อนไขเป็นจริง
//    - break : หยุดการวนลูปทันที
//    - continue : ข้ามไปรอบถัดไปของลูป

// 4. ฟังก์ชันในตัว (Built-in Functions):
//    - format(string, args) -> String
//      - ทำอะไร: แปลงข้อมูล (args) ให้เป็นสตริงตามรูปแบบที่กำหนดใน string
//      - รับพารามิเตอร์: 
//        - string: รูปแบบสตริงที่มี {} เป็นตำแหน่งแทรกข้อมูล (เช่น "Hello, {}")
//        - args: ข้อมูลที่จะแทรก (เช่น Number, String, Bool)
//      - คืนค่า: สตริงที่สร้างขึ้น (เช่น "Hello, Bob")
//    - print(string, args) -> ไม่คืนค่า (Void)
//      - ทำอะไร: แสดงผลข้อความไปยังหน้าจอโดยไม่ขึ้นบรรทัดใหม่
//      - รับพารามิเตอร์:
//        - string: ข้อความหรือรูปแบบที่มี {} (เช่น "Result = {}")
//        - args: ข้อมูลที่จะแทรกใน {} (เช่น Number, String, Bool)
//      - คืนค่า: ไม่มี (แค่แสดงผล)
//    - println(string, args) -> ไม่คืนค่า (Void)
//      - ทำอะไร: แสดงผลข้อความไปยังหน้าจอพร้อมขึ้นบรรทัดใหม่
//      - รับพารามิเตอร์:
//        - string: ข้อความหรือรูปแบบที่มี {} (เช่น "You entered: {}")
//        - args: ข้อมูลที่จะแทรกใน {} (เช่น Number, String, Bool)
//      - คืนค่า: ไม่มี (แค่แสดงผล)
//    - prompt() -> String
//      - ทำอะไร: รับอินพุตจากผู้ใช้ผ่านคีย์บอร์ด
//      - รับพารามิเตอร์: ไม่มี
//      - คืนค่า: สตริงที่ผู้ใช้ป้อน (เช่น "Hi")

// 5. ฟังก์ชัน (Functions):
//    - รองรับการกำหนดฟังก์ชันด้วยชื่อ, พารามิเตอร์, และชนิดข้อมูลที่คืนค่า
//    - รองรับ Pointer ด้วย * และการส่งที่อยู่ด้วย &
//    - รองรับการคืนค่าด้วย return

// 6. ตัวแปร (Variables):
//    - ใช้ var เพื่อกำหนดตัวแปร
//    - รองรับการตรวจจับชนิดอัตโนมัติ (เช่น var x = 1 -> Number, var y = "text" -> String)

// กำหนด Struct: Person
// - มีฟิลด์ name (String) และ age (Number)
struct Person {
    name: String;
    age: Number;
}

// ฟังก์ชัน say: สร้างข้อความทักทาย
// - รับ name เป็น String
// - คืนค่า String ที่เป็นข้อความทักทาย
func say(name: String) -> String {
    var greeting = format("Hello, {}", name); // สร้างตัวแปร greeting โดยใช้ format แทรก name
    return greeting; // คืนค่าข้อความ เช่น "Hello, Bob"
}

// ฟังก์ชัน test_pointer: แก้ไขค่าผ่าน Pointer
// - รับ num เป็น Pointer ไปยัง Number (*Number)
// - ไม่คืนค่า (Void)
func test_pointer(num: *Number) {
    num = 10; // เปลี่ยนค่าของตัวแปรที่ num ชี้อยู่ให้เป็น 10
}

// ฟังก์ชัน power: คำนวณการยกกำลัง
// - รับ base และ exp เป็น Number
// - คืนค่า Number ที่เป็นผลลัพธ์ของ base ** exp
func power(base: Number, exp: Number) -> Number {
    var result = base ** exp; // ใช้ตัวดำเนินการ ** เพื่อคำนวณการยกกำลัง
    return result; // คืนค่าผลลัพธ์ เช่น 2 ** 3 = 8
}

// ฟังก์ชันหลัก: main
// - เป็นจุดเริ่มต้นของโปรแกรม
// - คืนค่า Number เพื่อบอกสถานะการจบโปรแกรม
func main() -> Number {
    // การแสดงผลพื้นฐาน
    print("Hello, "); // แสดง "Hello, " โดยไม่ขึ้นบรรทัดใหม่
    println("World!"); // แสดง "World!" และขึ้นบรรทัดใหม่

    // การกำหนดตัวแปรและการคำนวณ
    var num = 1; // กำหนด num เป็น Number ค่าเริ่มต้น 1
    var result = num + 1.12; // คำนวณ num + 1.12 โดยใช้ +, ได้ result = 2.12
    var power_result = power(2, 3); // เรียก power(2, 3), ได้ 2 ** 3 = 8
    print("Result = {}\n", format("{}", result)); // แสดง "Result = 2.12"
    println("2 ** 3 = {}", power_result); // แสดง "2 ** 3 = 8"

    // การเรียกฟังก์ชัน say
    var message = say("Bob"); // เรียก say ด้วย "Bob", ได้ "Hello, Bob"
    println(message); // แสดง "Hello, Bob"

    // การทดสอบ Pointer
    var test_p: Number = 0; // กำหนด test_p เป็น Number ค่าเริ่มต้น 0
    test_pointer(&test_p); // ส่งที่อยู่ของ test_p ไปยัง test_pointer, ค่าจะเปลี่ยนเป็น 10
    println("Pointer test: {}", test_p); // แสดง "Pointer test: 10"

    // การใช้ Bool
    var is_greater = result > 1; // ใช้ > เพื่อเปรียบเทียบ, ได้ true เพราะ 2.12 > 1
    println("Is result > 1? {}", is_greater); // แสดง "Is result > 1? true"

    // การใช้ Array
    var numbers: Array<Number> = [1, 2, 3]; // กำหนด Array ของ Number
    println("First number: {}", numbers[0]); // แสดง "First number: 1" (เข้าถึงสมาชิกแรก)

    // การใช้ Struct
    var person: Person = { name: "Alice", age: 25 }; // สร้าง Struct Person
    println("Person: {} is {} years old", person.name, person.age); // แสดง "Person: Alice is 25 years old"

    // การใช้ Option
    var opt: Option<Number> = Some(42); // Option ที่มีค่า 42
    if (opt != Null) { // ใช้ != เพื่อตรวจสอบว่าไม่ใช่ Null
        println("Option value: {}", opt); // แสดง "Option value: 42"
    }

    // โครงสร้างควบคุม: if, else if, else
    if (result == 2.12) { // ใช้ == เพื่อเปรียบเทียบ, เป็นจริงเพราะ result = 2.12
        println("Result equals 2.12");
    } else if (result < 3) { // ใช้ < เพื่อเปรียบเทียบ
        println("Result is less than 3");
    } else {
        println("Result is something else");
    }

    // โครงสร้างควบคุม: for
    for (var i = 0; i < 3; i = i + 1) { // วนลูปจาก 0 ถึง 2
        if (i == 1) { // ถ้า i = 1
            continue; // ข้ามรอบนี้ไป
        }
        println("For loop: {}", i); // แสดง "For loop: 0", "For loop: 2"
    }

    // โครงสร้างควบคุม: while
    var count = 0; // ตัวนับเริ่มต้นที่ 0
    while (count <= 2) { // วนลูปตราบใดที่ count <= 2
        if (count == 2) { // ถ้า count = 2
            break; // หยุดลูป
        }
        println("While loop: {}", count); // แสดง "While loop: 0", "While loop: 1"
        count = count + 1; // เพิ่ม count
    }

    // การใช้ prompt
    var input = prompt(); // รอรับอินพุต เช่น "Hi"
    println("You entered: {}", input); // แสดง "You entered: Hi"

    return 0; // คืนค่า 0 เพื่อบอกว่าโปรแกรมจบสมบูรณ์
}